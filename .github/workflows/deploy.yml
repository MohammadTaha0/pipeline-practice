name: 🚀 Pipeline | Deploy Code on Main Server

on:
  push:
    branches:
      - main  # Only run on pushes to the main branch

jobs:
  deploy:
    name: 🎉 Deploy Frontend and Backend
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for this job

    steps:
      # Step 1: Checkout the latest code from the repository
      - name: 🚚 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to ensure no issues with comparisons

      # Step 2: Check for changes in composer.json  
      - name: 🔍 Check for changes in composer.json
        id: check_composer_changes
        run: |
          echo "Checking composer.json changes..."
          git fetch origin main
          LAST_COMMIT=$(git rev-parse HEAD)
          PREV_COMMIT=$(git rev-parse HEAD^)
          
          if git diff --name-only "$PREV_COMMIT" "$LAST_COMMIT" | grep "composer.json"; then
            echo "composer_json_changed=true" >> $GITHUB_ENV
            echo "composer.json has changed."
          else
            echo "composer_json_changed=false" >> $GITHUB_ENV
            echo "No changes in composer.json."
          fi

      # Step 3: Export ENV Variables
      - name: 🛠 Export ENV Variables
        run: |
          # Check if .env file exists, if not, create it
          if [ ! -f ".env" ]; then
            echo ".env file not found! Creating .env file..."
            touch .env  # Create an empty .env file
          fi

          # Ensure DEPLOY_TOKEN is added to the .env file
          echo "Adding DEPLOY_TOKEN to .env file..."
          echo "DEPLOY_TOKEN=${{ secrets.DEPLOY_TOKEN }}" >> .env

          # Export environment variables from .env to GitHub Actions
          echo "Exporting environment variables from .env file..."
          while IFS='=' read -r key value; do
            if [[ ! "$key" =~ ^# && -n "$key" ]]; then
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < .env


      # Step 4: Upload ONLY unzip.php to the root directory
      - name: 🚀 Upload unzip.php to the root directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: "./raw"  # Local directory 
          server-dir: "${{ secrets.BASE_URL }}/"  # Upload to the root directory
          dangerous-clean-slate: false

      # Step 5: Install Node.js 20.x
      - name: 🔧 Setup Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      # Step 6: Install and build frontend (React) application
      - name: 🚀 Install Frontend Dependencies and Build
        working-directory: frontend  # Change into your React app directory
        run: |
          npm install
          npm run build

      

      # Step 7: Deploy Frontend via FTP
      - name: 🚀 Deploy Frontend via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: "frontend/dist/"  # Ensure this ends with '/'
          server-dir: "${{ secrets.BASE_URL }}/"  # Ensure correct path for frontend
          exclude: |
            **/.env
          dangerous-clean-slate: false

      # Step 8: Upload API Code (excluding vendor)
      - name: 🚀 Upload API Code (excluding vendor)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: "api/"  # Ensure this ends with '/'
          server-dir: "${{ secrets.BASE_URL }}/api/"  # Ensure correct API path on server
          dangerous-clean-slate: false
          exclude: |
            vendor/*  # This ensures the 'vendor' directory is NOT uploaded
            .env  # You can also exclude .env if needed
            unzip.php  # Exclude unzip.php from API upload

      

      # Step 9: Install PHP Dependencies if composer.json has changed
      - name: 🛠 Install PHP Dependencies
        working-directory: api  # Change into your Laravel API directory
        run: |
          echo "composer.json has changed. Running composer install..."
          composer install --no-dev --optimize-autoloader

      # Step 10: Zip the vendor directory before upload (only if changes detected in composer.json)
      - name: 🗜️ Zip the Vendor Directory
        if: env.composer_json_changed == 'true'
        run: |
          cd api
          zip -r vendor.zip vendor  # Zip the vendor directory

      # Step 11: Upload Vendor Directory (Zipped) (only if composer.json changes)
      - name: 🚀 Upload Vendor Directory (Zipped)
        if: env.composer_json_changed == 'true'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: "api/"  # The zipped vendor directory
          server-dir: "${{ secrets.BASE_URL }}/api/"  # Ensure correct API path
          exclude: |
            *
            !vendor.zip
          dangerous-clean-slate: false

      # Step 12: Call unzip.php to unzip vendor.zip
      - name: 🛠️ Unzip Vendor.zip by calling API
        if: env.composer_json_changed == 'true'
        run: |
          curl https://${{ secrets.BASE_URL }}/raw/unzip.php -H "X-DEPLOY-TOKEN: ${{ secrets.DEPLOY_TOKEN }}"

      # Step 13: Run Migrations
      - name: 🔄 Run Migrations
        run: |
          curl -X GET "${{ secrets.BASE_URL }}/api/run-migrations" -H "X-DEPLOY-TOKEN: ${{ secrets.DEPLOY_TOKEN }}"
